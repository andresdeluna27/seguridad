show dbs; //muestra bases

use isc8c; // cambia de base

db.alumno.find({nombre:"paco"}).pretty(); //busqueda con parametros

db.alumno.insert([{nombre:"Andres",apat:"de Luna"},{nombre:"Angie",apat:"Ramos"},{nombre:"Ramon",amat:"Chavez"}]); //inserciones multiples

db.alumno.find().pretty(); //busqueda con formato

db.alumno.count(); //conteo

db.alumno.update({nombre:"Ramon"},{$set:{apat:"Mendez"}}); //modifica solo el primero que encuentra

db.alumno.updateMany({nombre:"Ramon"},{$set:{apat:"Three"}}); //modifica todos

db.alumno.updateMany({nombre:"Chuy",edad:60},{$set:{edad:37}}); 

db.alumno.remove({nombre:"dos"}); //borrar, si se quiere borrar todo se pone de parametro llaves {}

db.alumno.find(ObjectId("5af0b9afc2be053187e3027c")); //busqueda por ObjectId

db.alumno.find({_id:ObjectId("5af0b9afc2be053187e3027c")});

db.alumno.save({nombre:"hugo",materia:[{nombre:"BDD",desc:"primera hora",like:100000},{nombre:"Seguridad",desc:"tercer hora",like:50000}]}); //insercion de varios campos en uno solo


db.alumno.save({nombre:"Elena",materia:[{nombre:"matematicas",descripcion:"primera hora",
temas:[{nombre:"unidad 1",paginas:10}]},{nombre:"espanol",descripcion:"segunda hora",temas:[{nombre:"unidad ix",paginas:100}]}],edad:15});   //insercion de varios niveles

var cursor=db.alumno.find(); //se crea un cursor
21
while(cursor.hasNext()){
printjson(cursor.next());
}        //para imprimir el cursor

db.alumno.find({},{nombre:1}); //muestra nombres y objId

db.alumno.find({},{"_id":0,nombre:1}); //solo muestra nombre

db.alumno.find({},{"_id":0,nombre:1}).sort({"nombre":1}); //ordena por nombre

db.alumno.find({},{"_id":0,nombre:1}).sort({"nombre":1}).count(); //cuenta

db.alumno.find({nombre:"paco"},{"_id":0,nombre:1}).sort({"nombre":1});  //en este se ve que las primeras llaves son condiciones de busqueda y el segundo los campos a mostrar

db.alumno.find( { $or:[{nombre:"Angie"},{apat:"dos"}]}).pretty(); //queries con or

db.alumno.find( { $or:[{nombre:"Angie"},{apat:"martinez"}]},{nombre:1}).pretty();


function conteo(documento){
	if(documento.count()>50){
		print("muchos");
	}else{
		print("pocos");
	}
};
//declaracion de funcion

var cursor=db.alumno.find();

conteo(cursor); //uso de la funcion

db.alumno.find({},{nombre:1});

db.alumno.find({},{nombre:1,edad:1});

db.alumno.find({nombre:"paco",edad:25},{nombre:1,edad:1});

$lt:  //es lower than

db.alumno.find({nombre:"paco",edad:{$lt:30}},{nombre:1,edad:1}); //aplicando el "lower than"

$lte //lower than equal

$gt //grater than

$gte //grater than equal

$ne //not equals

db.alumno.find({edad:{$gt:18,$lt:60}},{nombre:1,edad:1}); //edad mayor a 18 y menor a 60


db.alumno.find({$or:[{edad:{$gt:18}},{edad:{$lt:60}}]},{nombre:1,edad:1}); //edad mayor a 18 o menor a 60

var cursor=db.alumno.find({edad:{$lt:30}}); //para usar la funcion anterior y ver si son pocos los de 30 anios

conteo(cursor);

db.alumno.find({$or:[{edad:{$gt:18}},{edad:{$lt:60}}]},{nombre:1,edad:1}).pretty().sort({nombre:1});

db.alumno.find({$or:[{edad:{$gt:18}},{edad:{$lt:60}}]},{nombre:1,edad:1}).pretty().sort({nombre:1}).limit(1); //muestra solo 1

db.alumno.find({$or:[{edad:{$gt:18}},{edad:{$lt:60}}]},{nombre:1,edad:1}).pretty().sort({nombre:1}).limit(1).skip(2); //aqui skip salta 2

db.alumno.find({$or:[{edad:{$gt:18}},{edad:{$lt:60}}]},{_id:0,nombre:1,edad:1}).pretty().sort({nombre:1}).limit(1).skip(2);


db.<nombreBD>.aggregate([
	{$match:{status:"A"}},
	{$group:{_id: "$cust_id",total:{$sum:"$amount"}}}
])

db.<nombreBD>.mapReduce(
	function(){emit(this.cust_id,this.amount);},
	funtion(key, values){return Array.sum(values)},
	{
	query:{status:"A"},
	out: "order_totals"
}
) //aumenta rendimiento al tener muchos datos

db.pokemon.insert([{nombre:"charmander",tipo:"fuego",nivel:70,sexo:"M"},{nombre:"moltres",tipo:"fuego",nivel:70,sexo:"H"},{nombre:"milktank",tipo:"normal",nivel:35,sexo:"M"},{nombre:"graveler",tipo:"roca",nivel:40,sexo:"H"},{nombre:"pichu",tipo:"electrico",nivel:5,sexo:"M"},{nombre:"eve",tipo:"normal",nivel:50,sexo:"H"},{nombre:"lotad",tipo:"agua",nivel:10,sexo:"M"},
{nombre:"squirtle",tipo:"agua",nivel:50,sexo:"H"},{nombre:"arbok",tipo:"veneno",nivel:20,sexo:"M"},
{nombre:"caterpie",tipo:"insecto",nivel:5,sexo:"H"},{nombre:"metapod",tipo:"insecto",nivel:30,sexo:"M"},
{nombre:"zapdos",tipo:"electrico",nivel:70,sexo:"H"},{nombre:"onix",tipo:"roca",nivel:25,sexo:"M"},
{nombre:"mew",tipo:"psiquico",nivel:80,sexo:"H"},{nombre:"blastoise",tipo:"agua",nivel:90,sexo:"M"}]
);

db.pokemon.aggregate([
	{$match:{sexo:"H"}},
	{$group:{_id: "$tipo",total:{$sum:"$nivel"}}}
]);

db.pokemon.mapReduce(
	function(){emit(this.tipo,this.nivel);},
	function(key, values){return Array.sum(values)},
	{
	query:{sexo:"H"},
	out: "order_totals"
});

https://docs.mongodb.com/manual/_images/aggregation-pipeline.bakedsvg.svg

//----------------ejemplos de all en find

db.stock.insert({codigo:"abc",nombre:"tenis",marca:["nike","adidas","flexi"],descripcion:[{talla:"C",numero:3,color:"azul"},{talla:"M",numero:5,color:"verde"}]});

db.stock.insert({codigo:"xyz",nombre:"tenis2",marca:["nike"],descripcion:[{talla:"G",numero:8,color:"rojo"},{talla:"M",numero:5,color:"verde"}]});

db.stock.find({marca:{$all:["flexi","adidas"]}});

db.stock.find({"descripcion.numero":5});

db.stock.find({"descripcion.numero":5},{"descripcion.numero":3});

db.stock.find({"descripcion.numero":{$all:[5]}}); // el all es un AND

db.stock.find({marca:{$in:["flexi","nike"]}}); //el in es un OR

//----------------------------------practica 1

3.- db.alumno.find({nombre:"Jose"});

4.- db.alumno.find({edad:"20"});

5.- db.alumno.find({"materias_cursadas.2":{$all:["Historia"]}});

6.- db.alumno.find({},{_id:0, no_registro:1 , nombre:1,apepat:1,apemat:1})

7.- db.alumno.find({$or:[{edad:"20"},{"materias_cursadas.1":{$all:["Matematicas"]}}]},{edad:1,materias_cursadas:1})

8.- db.alumno.find({$and:[{edad:"20"},{"materias_cursadas.1":{$all:["Aritmetica"]}}]},{nombre:1,edad:1})

10.- db.calificaciones.count();

db.alumno

hacer respaldo
mongodump -d pokemundo -o respapokemundo

db.dropDatabase() //eliminar base de datos, primero se hace use a esa base

mongorestore --drop -d pokemundo alumnorespa/isc8c/alumno.bson //restaura una coleccion





fin doc

